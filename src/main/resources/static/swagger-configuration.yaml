openapi: 3.0.3
info:
  title: CLEAR SOLUTIONS API
  description: Java practical test assignment for CLEAR SOLUTIONS
  termsOfService: CLEAR SOLUTIONS
  contact:
    name: CLEAR SOLUTIONS
    url: https://clear.solutions.com
    email: clearsolutions@gmail.com
  license:
    name: CLEAR SOLUTIONS
    url: https://clear.solutions.com
  version: 0.0.1-SNAPSHOT
servers:
  - url: http://localhost:8080
    description: Local environment
tags:
  - name: user
    description: Endpoints for user functionality
paths:
  /users:
    post:
      tags:
        - user
      summary: Create a new user
      description: Create a new user
      operationId: create
      requestBody:
        description: User data to be created
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserDto'
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserDto'
        '400':
          description: Bad request, e.g., missing or invalid parameters
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
    get:
      tags:
        - user
      summary: Search users by birthdate range
      operationId: searchUsersByBirthDateRange
      parameters:
        - name: fromDate
          in: query
          required: true
          schema:
            type: string
            format: date
        - name: toDate
          in: query
          required: true
          schema:
            type: string
            format: date
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/UserDto'
        '400':
          description: Bad request, e.g., missing or invalid parameters
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /users/{id}:
    patch:
      tags:
        - user
      summary: Partially update a user
      operationId: updatePartiallyUser
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
            format: int64
      requestBody:
        description: JSON patch document with the update data
        required: true
        content:
          application/json-patch+json:
            schema:
              type: array
              items:
                $ref: '#/components/schemas/JsonPatchDocument'
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserDto'
        '400':
          description: Bad request, e.g., missing or invalid parameters
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
    put:
      tags:
        - user
      summary: Update a user
      operationId: updateUser
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
            format: int64
      requestBody:
        description: Updated user information
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserDto'
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserDto'
        '400':
          description: Bad request, e.g., missing or invalid parameters
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
    delete:
      tags:
        - user
      summary: Delete a user
      operationId: deleteUser
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: Successful operation
        '400':
          description: Bad request, e.g., missing or invalid parameters
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
components:
  schemas:
    UserDto:
      type: object
      required:
        - email
        - firstName
        - lastName
        - birthDate
      properties:
        id:
          type: integer
          format: int64
          readOnly: true
        email:
          type: string
          format: email
        firstName:
          type: string
        lastName:
          type: string
        birthDate:
          type: string
          format: date
        address:
          type: string
          nullable: true
        phoneNumber:
          type: string
          nullable: true
    JsonPatchDocument:
      type: object
      required:
        - op
        - path
        - value
      properties:
        op:
          type: string
        path:
          type: string
        value:
          type: string
    ErrorResponse:
      type: object
      properties:
        message:
          type: string
          description: The error message